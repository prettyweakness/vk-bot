import vk_api
from vk_api.utils import get_random_id
import sqlite3
import datetime
import time
import random
import json
from tasks_database import TASKS

# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
GROUP_TOKEN = 'vk1.a.U55bi2V1xVgwCZDsXAWPiC_6grS-v98AgwmjCrUAD0-QrxXOkR_eG2-Dub2XnEQCJ7d_zn5q2KM_R_tusJwuo_EeIyh71U2bGuytK5x5gtzFuteho0HAG7-62rVzmHMm20sRryQn2JY9sbDFalf-ksqpGA2dCXF3Jq6gwbuA6Parud9Q8Xvw_GO67KqwN2IUDnM8nMHMFCU1pckQiV90mQ'
ADMIN_IDS = [424837142]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –û–ø—ã—Ç –∑–∞ –∑–∞–¥–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–¥–µ–ª–∞
TASK_EXPERIENCE = {
    '–ü–∞—Ç—Ä—É–ª—å–Ω—ã–π': 25,
    '–î–µ—Ç–µ–∫—Ç–∏–≤': 50,
    '–°–ø–µ—Ü–Ω–∞–∑': 75
}

# –°–∏—Å—Ç–µ–º–∞ —Ä—É–ª–µ—Ç–∫–∏
ROULETTE_PRIZES = {
    'experience': [10, 25, 50, 100],
    'bonus_tasks': [1, 2, 3],
    'special': ["2x –æ–ø—ã—Ç –Ω–∞ —Å–ª–µ–¥. –∑–∞–¥–∞–Ω–∏–µ", "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ", "–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞ (–º–∞–ª–æ–µ)"]
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK API
vk_session = vk_api.VkApi(token=GROUP_TOKEN)
vk = vk_session.get_api()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('bot_db.sqlite', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY, 
    rank TEXT DEFAULT '–†—è–¥–æ–≤–æ–π',
    experience INTEGER DEFAULT 0,
    last_task_time TEXT,
    current_task TEXT,
    join_date TEXT,
    department TEXT DEFAULT '–ü–∞—Ç—Ä—É–ª—å–Ω—ã–π',
    attempts INTEGER DEFAULT 3,              -- –ü–æ–ø—ã—Ç–∫–∏ –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏
    last_attempt_time TEXT,                  -- –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏
    bonus_tasks INTEGER DEFAULT 0,           -- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    daily_attempts_reset TEXT                -- –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±—Ä–æ—Å–∞ –ø–æ–ø—ã—Ç–æ–∫
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS tasks (
    id INTEGER PRIMARY KEY,
    task_text TEXT NOT NULL,
    difficulty TEXT NOT NULL
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS experience_log (
    id INTEGER PRIMARY KEY,
    user_id INTEGER,
    amount INTEGER,
    reason TEXT,
    admin_id INTEGER,
    timestamp TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS attempts_log (
    id INTEGER PRIMARY KEY,
    user_id INTEGER,
    amount INTEGER,
    reason TEXT,
    admin_id INTEGER,
    timestamp TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS bonus_tasks_log (
    id INTEGER PRIMARY KEY,
    user_id INTEGER,
    amount INTEGER,
    action TEXT,
    reason TEXT,
    timestamp TEXT
)
''')
conn.commit()

# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–Ω–≥–æ–≤ –∏ –æ—Ç–¥–µ–ª–æ–≤
RANK_TO_DEPARTMENT = {
    '–†—è–¥–æ–≤–æ–π': '–ü–∞—Ç—Ä—É–ª—å–Ω—ã–π',
    '–°–µ—Ä–∂–∞–Ω—Ç': '–î–µ—Ç–µ–∫—Ç–∏–≤', 
    '–õ–µ–π—Ç–µ–Ω–∞–Ω—Ç': '–°–ø–µ—Ü–Ω–∞–∑',
    '–ö–∞–ø–∏—Ç–∞–Ω': '–°–ø–µ—Ü–Ω–∞–∑',
    '–ú–∞–π–æ—Ä': '–°–ø–µ—Ü–Ω–∞–∑',
    '–ü–æ–¥–ø–æ–ª–∫–æ–≤–Ω–∏–∫': '–°–ø–µ—Ü–Ω–∞–∑',
    '–ü–æ–ª–∫–æ–≤–Ω–∏–∫': '–°–ø–µ—Ü–Ω–∞–∑'
}

DEPARTMENT_INFO = {
    '–ü–∞—Ç—Ä—É–ª—å–Ω—ã–π': {'emoji': 'üü¢', 'min_rank': '–†—è–¥–æ–≤–æ–π'},
    '–î–µ—Ç–µ–∫—Ç–∏–≤': {'emoji': 'üü°', 'min_rank': '–°–µ—Ä–∂–∞–Ω—Ç'},
    '–°–ø–µ—Ü–Ω–∞–∑': {'emoji': 'üî¥', 'min_rank': '–õ–µ–π—Ç–µ–Ω–∞–Ω—Ç'}
}

def create_keyboard(buttons):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = {
        "inline": True,
        "buttons": buttons
    }
    return keyboard

def get_main_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    buttons = [
        [
            {"action": {"type": "text", "label": "üéØ –ó–∞–¥–∞–Ω–∏–µ", "payload": "{\"command\":\"task\"}"}, "color": "primary"},
            {"action": {"type": "text", "label": "‚≠ê –°—Ç–∞—Ç—É—Å", "payload": "{\"command\":\"status\"}"}, "color": "secondary"}
        ],
        [
            {"action": {"type": "text", "label": "üé∞ –†—É–ª–µ—Ç–∫–∞", "payload": "{\"command\":\"roulette\"}"}, "color": "positive"},
            {"action": {"type": "text", "label": "üëÆ –°–ª—É–∂–±–∞", "payload": "{\"command\":\"service\"}"}, "color": "primary"}
        ]
    ]
    return create_keyboard(buttons)

def upload_photo_to_vk(image_type=None):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–∞ VK —Å–µ—Ä–≤–µ—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç attachment —Å—Ç—Ä–æ–∫—É"""
    try:
        import requests
        import os

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if image_type == 'task':
            filename = 'task.png'
        elif image_type == 'roulette':
            filename = 'generated-icon.png'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
        elif image_type == 'service':
            filename = 'status.png'
        elif image_type == 'welcome':
            filename = 'welcome.png'
        else:
            filename = 'generated-icon.png'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π
        if not os.path.exists(filename):
            filename = 'generated-icon.png'

        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        upload_url = vk.photos.getMessagesUploadServer()['upload_url']

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        with open(filename, 'rb') as photo_file:
            response = requests.post(upload_url, files={'photo': photo_file}).json()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
        photo = vk.photos.saveMessagesPhoto(
            photo=response['photo'],
            server=response['server'],
            hash=response['hash']
        )[0]

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º attachment —Å—Ç—Ä–æ–∫—É
        return f"photo{photo['owner_id']}_{photo['id']}"
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
        return None

def send_message(user_id, message, keyboard=None, image_type=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏"""
    try:
        # –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        cursor.execute("SELECT COUNT(*) FROM users WHERE user_id=?", (user_id,))
        user_exists = cursor.fetchone()[0] > 0

        if not user_exists and keyboard:
            print("‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            keyboard = None

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
        photo_attachment = upload_photo_to_vk(image_type)

        params = {
            'user_id': user_id,
            'message': message,
            'random_id': get_random_id()
        }

        if keyboard:
            params['keyboard'] = json.dumps(keyboard)

        if photo_attachment:
            params['attachment'] = photo_attachment

        vk.messages.send(**params)
        print(f"‚úì –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} {'—Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π' if photo_attachment else ''}")
        return True
    except vk_api.exceptions.ApiError as e:
        if e.code == 912:
            print(f"‚ö†Ô∏è VK API –û—à–∏–±–∫–∞ 912: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            try:
                photo_attachment = upload_photo_to_vk(image_type)
                params = {
                    'user_id': user_id,
                    'message': message,
                    'random_id': get_random_id()
                }
                if photo_attachment:
                    params['attachment'] = photo_attachment

                vk.messages.send(**params)
                print(f"‚úì –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} {'—Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π' if photo_attachment else ''}")
                return True
            except Exception as e2:
                print(f"‚úó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e2}")
                return False
        else:
            print(f"‚úó VK API –æ—à–∏–±–∫–∞: {e}")
            return False
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

def add_experience(user_id, amount, reason, admin_id):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ä—É—á–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ)"""
    cursor.execute("UPDATE users SET experience = experience + ? WHERE user_id=?", (amount, user_id))
    conn.commit()

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ
    cursor.execute(
        "INSERT INTO experience_log (user_id, amount, reason, admin_id, timestamp) VALUES (?, ?, ?, ?, ?)",
        (user_id, amount, reason, admin_id, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    )
    conn.commit()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞
    cursor.execute("SELECT experience, rank FROM users WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    if not result:
        return None
    exp, current_rank = result

    ranks = {
        0: "–†—è–¥–æ–≤–æ–π",
        100: "–°–µ—Ä–∂–∞–Ω—Ç", 
        300: "–õ–µ–π—Ç–µ–Ω–∞–Ω—Ç",
        600: "–ö–∞–ø–∏—Ç–∞–Ω",
        1000: "–ú–∞–π–æ—Ä",
        1500: "–ü–æ–¥–ø–æ–ª–∫–æ–≤–Ω–∏–∫",
        2000: "–ü–æ–ª–∫–æ–≤–Ω–∏–∫"
    }

    new_rank = "–†—è–¥–æ–≤–æ–π"
    for threshold, rank in sorted(ranks.items(), reverse=True):
        if exp >= threshold:
            new_rank = rank
            break

    if current_rank != new_rank:
        cursor.execute("UPDATE users SET rank=? WHERE user_id=?", (new_rank, user_id))
        conn.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–¥–µ–ª –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏
        new_department = RANK_TO_DEPARTMENT.get(new_rank, '–ü–∞—Ç—Ä—É–ª—å–Ω—ã–π')
        cursor.execute("UPDATE users SET department=? WHERE user_id=?", (new_department, user_id))
        conn.commit()

        return new_rank
    return None

def add_attempts(user_id, amount, reason, admin_id):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    cursor.execute("UPDATE users SET attempts = attempts + ? WHERE user_id=?", (amount, user_id))
    conn.commit()

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ
    cursor.execute(
        "INSERT INTO attempts_log (user_id, amount, reason, admin_id, timestamp) VALUES (?, ?, ?, ?, ?)",
        (user_id, amount, reason, admin_id, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    )
    conn.commit()

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    cursor.execute("SELECT attempts FROM users WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else amount

def add_bonus_tasks(user_id, amount, reason):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –±–æ–Ω—É—Å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    cursor.execute("UPDATE users SET bonus_tasks = bonus_tasks + ? WHERE user_id=?", (amount, user_id))
    conn.commit()

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ
    cursor.execute(
        "INSERT INTO bonus_tasks_log (user_id, amount, action, reason, timestamp) VALUES (?, ?, ?, ?, ?)",
        (user_id, amount, 'add', reason, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    )
    conn.commit()

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    cursor.execute("SELECT bonus_tasks FROM users WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else amount

def use_bonus_task(user_id, reason):
    """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–¥–Ω–æ –±–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ"""
    cursor.execute("UPDATE users SET bonus_tasks = bonus_tasks - 1 WHERE user_id=?", (user_id,))
    conn.commit()

    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    cursor.execute(
        "INSERT INTO bonus_tasks_log (user_id, amount, action, reason, timestamp) VALUES (?, ?, ?, ?, ?)",
        (user_id, 1, 'use', reason, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    )
    conn.commit()

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    cursor.execute("SELECT bonus_tasks FROM users WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else 0

def can_get_new_task(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ"""
    cursor.execute("SELECT last_task_time, bonus_tasks FROM users WHERE user_id=?", (user_id,))
    result = cursor.fetchone()

    if not result:
        return True, None, False

    last_task_time, bonus_tasks = result

    # –ï—Å–ª–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–ª—É—á–∞–ª –∑–∞–¥–∞–Ω–∏–µ
    if not last_task_time:
        return True, None, False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    last_task_time = datetime.datetime.strptime(last_task_time, "%Y-%m-%d %H:%M:%S")
    now = datetime.datetime.now()
    time_diff = now - last_task_time

    # –ï—Å–ª–∏ –µ—Å—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å—Ä–∞–∑—É
    if bonus_tasks > 0:
        return True, "bonus", True

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    if time_diff.total_seconds() >= 24 * 3600:
        return True, None, False
    else:
        remaining = 24 * 3600 - time_diff.total_seconds()
        hours = int(remaining // 3600)
        minutes = int((remaining % 3600) // 60)
        return False, f"{hours}—á {minutes}–º", False

def get_user_info(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    cursor.execute("SELECT rank, experience, current_task, last_task_time, department, attempts, last_attempt_time, bonus_tasks FROM users WHERE user_id=?", (user_id,))
    result = cursor.fetchone()

    if result:
        rank, exp, current_task, last_task_time, department, attempts, last_attempt_time, bonus_tasks = result
        return {
            'rank': rank,
            'experience': exp,
            'department': department,
            'current_task': current_task,
            'last_task_time': last_task_time,
            'attempts': attempts,
            'last_attempt_time': last_attempt_time,
            'bonus_tasks': bonus_tasks
        }
    return None

def ensure_user_exists(user_id):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    cursor.execute("SELECT user_id FROM users WHERE user_id=?", (user_id,))
    if not cursor.fetchone():
        cursor.execute(
            "INSERT INTO users (user_id, rank, experience, join_date, department, attempts, daily_attempts_reset) VALUES (?, ?, ?, ?, ?, ?, ?)",
            (user_id, '–†—è–¥–æ–≤–æ–π', 0, datetime.datetime.now().strftime("%Y-%m-%d"), '–ü–∞—Ç—Ä—É–ª—å–Ω—ã–π', 3, datetime.datetime.now().strftime("%Y-%m-%d"))
        )
        conn.commit()
        return True
    return False

def spin_roulette(user_id):
    """–ö—Ä—É—Ç–∫–∞ —Ä—É–ª–µ—Ç–∫–∏"""
    user_info = get_user_info(user_id)

    if user_info['attempts'] <= 0:
        return False, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è (–º–∞–∫—Å–∏–º—É–º 1 —Ä–∞–∑ –≤ –¥–µ–Ω—å)
    if user_info['last_attempt_time']:
        last_spin = datetime.datetime.strptime(user_info['last_attempt_time'], "%Y-%m-%d %H:%M:%S")
        if (datetime.datetime.now() - last_spin).total_seconds() < 24 * 3600:
            return False, "‚è∞ –†—É–ª–µ—Ç–∫—É –º–æ–∂–Ω–æ –∫—Ä—É—Ç–∏—Ç—å —Ä–∞–∑ –≤ –¥–µ–Ω—å"

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø –ø—Ä–∏–∑–∞
    prize_types = ['experience'] * 50 + ['bonus_tasks'] * 30 + ['special'] * 20
    prize_type = random.choice(prize_types)
    prize = random.choice(ROULETTE_PRIZES[prize_type])

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ –∏ –≤—Ä–µ–º—è
    cursor.execute("UPDATE users SET attempts = attempts - 1, last_attempt_time = ? WHERE user_id = ?",
                  (datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"), user_id))
    conn.commit()

    # –í—ã–¥–∞–µ–º –ø—Ä–∏–∑
    if prize_type == 'experience':
        add_experience(user_id, prize, "–í—ã–∏–≥—Ä—ã—à –≤ —Ä—É–ª–µ—Ç–∫–µ", 0)
        return True, f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {prize} –æ–ø—ã—Ç–∞!"

    elif prize_type == 'bonus_tasks':
        new_bonus_count = add_bonus_tasks(user_id, prize, "–í—ã–∏–≥—Ä—ã—à –≤ —Ä—É–ª–µ—Ç–∫–µ")
        return True, f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {prize} –¥–æ–ø–æ–ª–Ω–∏–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {new_bonus_count} –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π."

    else:
        # –î–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤
        if prize == "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ":
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è
            cursor.execute("UPDATE users SET last_task_time = NULL WHERE user_id = ?", (user_id,))
            conn.commit()
            return True, f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: {prize}! –ú–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å—Ä–∞–∑—É."

        elif prize == "2x –æ–ø—ã—Ç –Ω–∞ —Å–ª–µ–¥. –∑–∞–¥–∞–Ω–∏–µ":
            # –í—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å (–º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤)
            return True, f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: {prize}! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."

        else:
            return True, f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: {prize}!"

def reset_daily_attempts():
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å –ø–æ–ø—ã—Ç–æ–∫"""
    now = datetime.datetime.now()
    today = now.strftime("%Y-%m-%d")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö, —É –∫–æ–≥–æ –¥–∞—Ç–∞ —Å–±—Ä–æ—Å–∞ –Ω–µ —Å–µ–≥–æ–¥–Ω—è
    cursor.execute("""
        UPDATE users 
        SET attempts = 3, 
            daily_attempts_reset = ?
        WHERE daily_attempts_reset != ? OR daily_attempts_reset IS NULL
    """, (today, today))

    updated = cursor.rowcount
    conn.commit()

    if updated > 0:
        print(f"‚úÖ –°–±—Ä–æ—à–µ–Ω—ã –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è {updated} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    else:
        print("‚ÑπÔ∏è –ü–æ–ø—ã—Ç–∫–∏ —É–∂–µ —Å–±—Ä–æ—à–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è")

def handle_admin_command(user_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    parts = text.split()
    command = parts[0].lower()

    if command == '/add_exp':
        if len(parts) < 3:
            send_message(user_id, "‚ùå –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /add_exp [user_id] [amount] [reason]")
            return

        try:
            target_user_id = int(parts[1])
            amount = int(parts[2])
            reason = ' '.join(parts[3:]) if len(parts) > 3 else "–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∑–∞–¥–∞–Ω–∏–µ"

            if amount <= 0:
                send_message(user_id, "‚ùå –°—É–º–º–∞ –æ–ø—ã—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ensure_user_exists(target_user_id)

            # –ù–∞—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç
            new_rank = add_experience(target_user_id, amount, reason, user_id)

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ—Å–ª–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
            target_info = get_user_info(target_user_id)

            response = (
                f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {amount} –æ–ø—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"‚≠ê –¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç: {target_info['experience']}\n"
                f"üëÆ –ó–≤–∞–Ω–∏–µ: {target_info['rank']}"
            )

            if new_rank:
                response += f"\nüéâ –ù–æ–≤–æ–µ –∑–≤–∞–Ω–∏–µ: {new_rank}"

            send_message(user_id, response)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            send_message(target_user_id, 
                f"üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} –æ–ø—ã—Ç–∞!\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"‚≠ê –¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç: {target_info['experience']}\n"
                f"üëÆ –ó–≤–∞–Ω–∏–µ: {target_info['rank']}"
            )

        except ValueError:
            send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_exp [user_id] [amount] [reason]")
        except Exception as e:
            send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

    elif command == '/add_attempts':
        if len(parts) < 3:
            send_message(user_id, "‚ùå –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /add_attempts [user_id] [amount] [reason]")
            return

        try:
            target_user_id = int(parts[1])
            amount = int(parts[2])
            reason = ' '.join(parts[3:]) if len(parts) > 3 else "–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"

            if amount <= 0:
                send_message(user_id, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ensure_user_exists(target_user_id)

            # –ù–∞—á–∏—Å–ª—è–µ–º –ø–æ–ø—ã—Ç–∫–∏
            new_attempts = add_attempts(target_user_id, amount, reason, user_id)

            response = (
                f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {amount} –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"üé∞ –¢–µ–ø–µ—Ä—å –ø–æ–ø—ã—Ç–æ–∫: {new_attempts}"
            )

            send_message(user_id, response)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            send_message(target_user_id, 
                f"üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏!\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"üé∞ –¢–µ–ø–µ—Ä—å –ø–æ–ø—ã—Ç–æ–∫: {new_attempts}"
            )

        except ValueError:
            send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_attempts [user_id] [amount] [reason]")
        except Exception as e:
            send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

    elif command == '/add_bonus_tasks':
        if len(parts) < 3:
            send_message(user_id, "‚ùå –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /add_bonus_tasks [user_id] [amount] [reason]")
            return

        try:
            target_user_id = int(parts[1])
            amount = int(parts[2])
            reason = ' '.join(parts[3:]) if len(parts) > 3 else "–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"

            if amount <= 0:
                send_message(user_id, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ensure_user_exists(target_user_id)

            # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            new_bonus_count = add_bonus_tasks(target_user_id, amount, reason)

            response = (
                f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {amount} –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"üéÅ –¢–µ–ø–µ—Ä—å –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {new_bonus_count}"
            )

            send_message(user_id, response)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            send_message(target_user_id, 
                f"üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π!\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"üéÅ –¢–µ–ø–µ—Ä—å –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {new_bonus_count}\n\n"
                f"üí° –ë–æ–Ω—É—Å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–∑–≤–æ–ª—è—é—Ç –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è 24 —á–∞—Å–æ–≤!"
            )

        except ValueError:
            send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_bonus_tasks [user_id] [amount] [reason]")
        except Exception as e:
            send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

    elif command == '/complete_task':
        if len(parts) < 2:
            send_message(user_id, "‚ùå –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /complete_task [user_id]")
            return

        try:
            target_user_id = int(parts[1])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ensure_user_exists(target_user_id)
            user_info = get_user_info(target_user_id)

            if not user_info['current_task']:
                send_message(user_id, "‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è")
                return

            # –ù–∞—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç –∑–∞ –∑–∞–¥–∞–Ω–∏–µ
            experience_amount = TASK_EXPERIENCE.get(user_info['department'], 25)
            new_rank = add_experience(target_user_id, experience_amount, "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è", user_id)

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
            now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute("UPDATE users SET current_task=NULL, last_task_time=? WHERE user_id=?", (now, target_user_id))
            conn.commit()

            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            updated_info = get_user_info(target_user_id)

            response = (
                f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
                f"üéØ –ó–∞–¥–∞–Ω–∏–µ: {user_info['current_task']}\n"
                f"‚≠ê –ù–∞—á–∏—Å–ª–µ–Ω–æ –æ–ø—ã—Ç–∞: {experience_amount}\n"
                f"üìä –¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç: {updated_info['experience']}\n"
                f"üëÆ –ó–≤–∞–Ω–∏–µ: {updated_info['rank']}"
            )

            if new_rank:
                response += f"\nüéâ –ù–æ–≤–æ–µ –∑–≤–∞–Ω–∏–µ: {new_rank}"

            send_message(user_id, response)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            send_message(target_user_id,
                f"üéâ –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n"
                f"üéØ –ó–∞–¥–∞–Ω–∏–µ: {user_info['current_task']}\n"
                f"‚≠ê –ù–∞–≥—Ä–∞–¥–∞: {experience_amount} –æ–ø—ã—Ç–∞\n"
                f"üìä –¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç: {updated_info['experience']}\n"
                f"üëÆ –ó–≤–∞–Ω–∏–µ: {updated_info['rank']}\n\n"
                f"‚è≥ –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞"
            )

        except ValueError:
            send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /complete_task [user_id]")
        except Exception as e:
            send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

    else:
        send_message(user_id,
            "üëÆ –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n"
            "‚ûï /add_exp [user_id] [amount] [reason] - –Ω–∞—á–∏—Å–ª–∏—Ç—å –æ–ø—ã—Ç\n"
            "üé∞ /add_attempts [user_id] [amount] [reason] - –Ω–∞—á–∏—Å–ª–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏\n"
            "üéÅ /add_bonus_tasks [user_id] [amount] [reason] - –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è\n"
            "‚úÖ /complete_task [user_id] - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )

def show_user_status(user_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_info = get_user_info(user_id)
    if not user_info:
        send_message(user_id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ '–°–ª—É–∂–±–∞' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return

    department = user_info['department']
    dept_info = DEPARTMENT_INFO[department]

    # –°–ª–µ–¥—É—é—â–µ–µ –∑–≤–∞–Ω–∏–µ
    exp = user_info['experience']
    next_rank_exp = 100 - (exp % 100) if exp < 2000 else 0

    status_msg = (
        f"{dept_info['emoji']} –°—Ç–∞—Ç—É—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:\n\n"
        f"üëÆ –û—Ç–¥–µ–ª: {department}\n"
        f"‚≠ê –ó–≤–∞–Ω–∏–µ: {user_info['rank']}\n"
        f"üéØ –û–ø—ã—Ç: {exp} –æ—á–∫–æ–≤\n"
        f"üé∞ –ü–æ–ø—ã—Ç–∫–∏ —Ä—É–ª–µ—Ç–∫–∏: {user_info['attempts']}\n"
        f"üéÅ –î–æ–ø. –∑–∞–¥–∞–Ω–∏—è: {user_info['bonus_tasks']}\n"
    )

    if next_rank_exp > 0:
        status_msg += f"üìà –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–≤–∞–Ω–∏—è: {next_rank_exp} –æ—á–∫–æ–≤\n"

    # –°–ª–µ–¥—É—é—â–∏–π –æ—Ç–¥–µ–ª
    ranks_order = ["–†—è–¥–æ–≤–æ–π", "–°–µ—Ä–∂–∞–Ω—Ç", "–õ–µ–π—Ç–µ–Ω–∞–Ω—Ç", "–ö–∞–ø–∏—Ç–∞–Ω", "–ú–∞–π–æ—Ä", "–ü–æ–¥–ø–æ–ª–∫–æ–≤–Ω–∏–∫", "–ü–æ–ª–∫–æ–≤–Ω–∏–∫"]
    current_index = ranks_order.index(user_info['rank'])

    if current_index < len(ranks_order) - 1:
        next_rank = ranks_order[current_index + 1]
        next_dept = RANK_TO_DEPARTMENT.get(next_rank, '–°–ø–µ—Ü–Ω–∞–∑')
        if next_dept != department:
            status_msg += f"üîì –°–ª–µ–¥—É—é—â–∏–π –æ—Ç–¥–µ–ª: {next_dept} (–∑–≤–∞–Ω–∏–µ {next_rank})\n"

    # –ê–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
    if user_info['current_task']:
        status_msg += f"\nüìã –ê–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ:\n{user_info['current_task']}"
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        can_get, time_remaining, has_bonus = can_get_new_task(user_id)
        if not can_get and not has_bonus:
            status_msg += f"\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {time_remaining}"
        elif has_bonus:
            status_msg += f"\nüéÅ –ú–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ —Å–µ–π—á–∞—Å (–∏—Å–ø–æ–ª—å–∑—É—è –±–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ)"
        else:
            status_msg += f"\n‚úÖ –ì–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è!"

    send_message(user_id, status_msg, get_main_keyboard(), 'service')

def send_task_to_user(user_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞)"""
    user_info = get_user_info(user_id)
    if not user_info:
        send_message(user_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ '–°–ª—É–∂–±–∞' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
    can_get, time_remaining, has_bonus = can_get_new_task(user_id)

    if not can_get and not has_bonus:
        send_message(user_id, 
            f"‚è∞ –í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ. –°–ª–µ–¥—É—é—â–µ–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ {time_remaining}\n\n"
            f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–Ω—É—Å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è!",
            get_main_keyboard()
        )
        return

    # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    using_bonus = False
    if has_bonus:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        remaining_bonus = use_bonus_task(user_id, "–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è")
        using_bonus = True

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    department = user_info['department']
    task = get_random_task(department)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute("UPDATE users SET last_task_time=?, current_task=? WHERE user_id=?", (now, task, user_id))
    conn.commit()

    dept_info = DEPARTMENT_INFO[department]
    experience_amount = TASK_EXPERIENCE[department]

    message = (
        f"{dept_info['emoji']} –°–ª—É–∂–µ–±–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ ({department}):\n\n"
        f"üéØ {task}\n\n"
        f"üí∞ –ù–∞–≥—Ä–∞–¥–∞: {experience_amount} –æ–ø—ã—Ç–∞\n"
        f"üëÆ –ó–≤–∞–Ω–∏–µ: {user_info['rank']}\n"
    )

    if using_bonus:
        message += f"üéÅ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –±–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –û—Å—Ç–∞–ª–æ—Å—å: {remaining_bonus}\n"

    message += "üí´ –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–º–∞–Ω–¥–∏—Ä—É –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã!"

    if not using_bonus:
        message += "\n\n‚è≥ –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞"
    else:
        message += "\n\nüí° –ú–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å—Ä–∞–∑—É, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è!"

    send_message(user_id, message, get_main_keyboard(), 'task')

def get_random_task(department):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –æ—Ç–¥–µ–ª–∞"""
    difficulty = 'easy' if department == '–ü–∞—Ç—Ä—É–ª—å–Ω—ã–π' else 'medium' if department == '–î–µ—Ç–µ–∫—Ç–∏–≤' else 'hard'
    try:
        cursor.execute(
            "SELECT task_text FROM tasks WHERE difficulty=? ORDER BY RANDOM() LIMIT 1", 
            (difficulty,)
        )
        task = cursor.fetchone()
        return task[0] if task else random.choice(TASKS[difficulty])
    except:
        return random.choice(TASKS[difficulty])

def handle_message(user_id, text, payload=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π payload"""
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ payload –æ—Ç –∫–Ω–æ–ø–æ–∫
    if payload:
        try:
            payload_data = json.loads(payload)
            if 'command' in payload_data:
                text = payload_data['command']
        except:
            pass

    text = text.lower().strip()
    print(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: '{text}' (payload: {payload})")

    # –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if is_admin(user_id) and (text.startswith('/add_exp') or text.startswith('/add_attempts') or 
                             text.startswith('/add_bonus_tasks') or text.startswith('/complete_task')):
        handle_admin_command(user_id, text)
        return

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
    is_new_user = ensure_user_exists(user_id)
    user_info = get_user_info(user_id)

    if text in ['–Ω–∞—á–∞—Ç—å', '—Å–ª—É–∂–±–∞', '—Å—Ç–∞—Ä—Ç', 'service']:
        department = user_info['department']
        dept_info = DEPARTMENT_INFO[department]

        welcome_msg = (
            f"{dept_info['emoji']} –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–ª–∏—Ü–µ–π—Å–∫–∏–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç!\n\n"
            f"üëÆ –í–∞—à –æ—Ç–¥–µ–ª: {department}\n"
            f"‚≠ê –ó–≤–∞–Ω–∏–µ: {user_info['rank']}\n"
            f"üéØ –û–ø—ã—Ç: {user_info['experience']} –æ—á–∫–æ–≤\n"
            f"üé∞ –ü–æ–ø—ã—Ç–∫–∏ —Ä—É–ª–µ—Ç–∫–∏: {user_info['attempts']}\n"
            f"üéÅ –ë–æ–Ω—É—Å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è: {user_info['bonus_tasks']}\n\n"
        )

        if is_new_user:
            welcome_msg += "üéâ –í—ã –ø—Ä–∏–Ω—è—Ç—ã –Ω–∞ —Å–ª—É–∂–±—É! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–º–∞–Ω–¥–∏—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è."
        else:
            welcome_msg += "üí´ –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç –∫–æ–º–∞–Ω–¥–∏—Ä–∞!"

        send_message(user_id, welcome_msg, get_main_keyboard(), 'welcome')

    elif text in ['–∑–∞–¥–∞–Ω–∏–µ', '—Ä–∞–ø–æ—Ä—Ç', 'task']:
        send_task_to_user(user_id)

    elif text in ['—Å—Ç–∞—Ç—É—Å', '—Ä–∞–Ω–≥', '–∑–≤–∞–Ω–∏–µ', 'status']:
        show_user_status(user_id)

    elif text in ['—Ä—É–ª–µ—Ç–∫–∞', '–∫–æ–ª–µ—Å–æ', 'spin', 'roulette']:
        success, message = spin_roulette(user_id)
        send_message(user_id, message, get_main_keyboard(), 'roulette')

    else:
        send_message(user_id, 
            "üëÆ –ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π –±–æ—Ç\n\n"
            "üéØ '–°–ª—É–∂–±–∞' - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "üìù '–ó–∞–¥–∞–Ω–∏–µ' - –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ\n"  
            "‚≠ê '–°—Ç–∞—Ç—É—Å' - —É–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ä–∞–Ω–≥\n"
            "üé∞ '–†—É–ª–µ—Ç–∫–∞' - –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É\n\n"
            "üí° –ë–æ–Ω—É—Å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–∑–≤–æ–ª—è—é—Ç –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è 24 —á–∞—Å–æ–≤!",
            get_main_keyboard()
        )

def check_new_messages():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π payload"""
    try:
        response = vk.messages.getConversations(
            count=20,
            filter='unread',
            extended=0
        )

        processed = 0
        for item in response['items']:
            message = item['last_message']
            user_id = message['from_id']
            text = message['text']
            payload = message.get('payload')

            print(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: '{text}', payload: {payload}")
            handle_message(user_id, text, payload)

            vk.messages.markAsRead(peer_id=user_id)
            processed += 1

        if processed > 0:
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {processed}")

        return processed

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return 0

def daily_attempts_job():
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å –ø–æ–ø—ã—Ç–æ–∫"""
    while True:
        now = datetime.datetime.now()
        if now.hour == 0 and now.minute == 0:  # –í –ø–æ–ª–Ω–æ—á—å
            reset_daily_attempts()
            time.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å
        time.sleep(60)

# –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
print("üëÆ –ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
print("üîÅ –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥...")
print("üé∞ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ø—ã—Ç–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (3 –ø–æ–ø—ã—Ç–∫–∏ –≤ –¥–µ–Ω—å)")
print("üéÅ –°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
print("‚å®Ô∏è  –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∑–∞–¥–∞–Ω–∏–π
try:
    for difficulty, tasks in TASKS.items():
        for task in tasks:
            cursor.execute(
                "INSERT OR IGNORE INTO tasks (task_text, difficulty) VALUES (?, ?)",
                (task, difficulty)
            )
    conn.commit()
    print("‚úÖ –ó–∞–¥–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
except Exception as e:
    print(f"‚ÑπÔ∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏–π: {e}")

# –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –ø–æ–ø—ã—Ç–æ–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
import threading
threading.Thread(target=daily_attempts_job, daemon=True).start()

while True:
    try:
        check_new_messages()
        time.sleep(5)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        time.sleep(60)